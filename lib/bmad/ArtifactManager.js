/**
 * BMAD Artifact Manager
 * Manages workflow artifacts - documents, code, and other files generated by agents
 */

const fs = require('fs').promises;
const path = require('path');

const isServer = typeof window === 'undefined';

class ArtifactManager {
  constructor() {
    this.artifactsPath = path.join(process.cwd(), '.bmad-output');
    this.initialized = false;
  }

  /**
   * Initialize artifact manager and create output directories
   */
  async initialize() {
    if (!isServer) {
      console.warn('ArtifactManager can only run on server side');
      return false;
    }

    try {
      // Create base artifacts directory
      await this.ensureDirectory(this.artifactsPath);
      
      // Create subdirectories for different artifact types
      const subdirs = ['documents', 'code', 'tests', 'configs', 'workflows'];
      for (const subdir of subdirs) {
        await this.ensureDirectory(path.join(this.artifactsPath, subdir));
      }

      this.initialized = true;
      console.log('BMAD Artifact Manager initialized');
      return true;
    } catch (error) {
      console.error('Failed to initialize Artifact Manager:', error);
      throw error;
    }
  }

  /**
   * Save workflow artifacts to filesystem
   */
  async saveWorkflowArtifacts(workflowId, artifacts) {
    if (!isServer || !this.initialized) {
      console.warn('Cannot save artifacts - server environment required');
      return [];
    }

    const savedArtifacts = [];
    
    try {
      // Create workflow-specific directory
      const workflowDir = path.join(this.artifactsPath, 'workflows', workflowId);
      await this.ensureDirectory(workflowDir);

      for (const artifact of artifacts) {
        const savedArtifact = await this.saveArtifact(workflowDir, artifact);
        if (savedArtifact) {
          savedArtifacts.push(savedArtifact);
        }
      }

      // Create workflow manifest
      await this.createWorkflowManifest(workflowDir, workflowId, savedArtifacts);

      console.log(`Saved ${savedArtifacts.length} artifacts for workflow ${workflowId}`);
      return savedArtifacts;

    } catch (error) {
      console.error(`Error saving artifacts for workflow ${workflowId}:`, error);
      throw error;
    }
  }

  /**
   * Save individual artifact to filesystem
   */
  async saveArtifact(workflowDir, artifact) {
    try {
      // Determine file extension based on artifact type
      const extension = this.getFileExtension(artifact);
      const filename = artifact.filename || `${artifact.name.toLowerCase().replace(/\s+/g, '-')}${extension}`;
      const filepath = path.join(workflowDir, filename);

      // Write artifact content to file
      await fs.writeFile(filepath, artifact.content, 'utf-8');

      // Create artifact metadata
      const savedArtifact = {
        ...artifact,
        filepath,
        filename,
        savedAt: new Date().toISOString(),
        size: Buffer.byteLength(artifact.content, 'utf8')
      };

      console.log(`Saved artifact: ${filename}`);
      return savedArtifact;

    } catch (error) {
      console.error(`Error saving artifact ${artifact.name}:`, error);
      return null;
    }
  }

  /**
   * Get appropriate file extension for artifact type
   */
  getFileExtension(artifact) {
    switch (artifact.type) {
      case 'document':
        return '.md';
      case 'code':
        if (artifact.metadata?.language) {
          const langExtensions = {
            'javascript': '.js',
            'typescript': '.ts',
            'python': '.py',
            'java': '.java',
            'csharp': '.cs',
            'go': '.go',
            'rust': '.rs',
            'php': '.php',
            'ruby': '.rb'
          };
          return langExtensions[artifact.metadata.language] || '.txt';
        }
        return '.js'; // Default to JS
      case 'test':
        return '.md';
      case 'config':
        return '.json';
      case 'yaml':
        return '.yaml';
      default:
        return '.txt';
    }
  }

  /**
   * Create workflow manifest file
   */
  async createWorkflowManifest(workflowDir, workflowId, artifacts) {
    const manifest = {
      workflowId,
      createdAt: new Date().toISOString(),
      totalArtifacts: artifacts.length,
      artifacts: artifacts.map(artifact => ({
        name: artifact.name,
        type: artifact.type,
        filename: artifact.filename,
        description: artifact.description,
        agent: artifact.metadata?.agent,
        size: artifact.size
      })),
      summary: this.generateWorkflowSummary(artifacts)
    };

    const manifestPath = path.join(workflowDir, 'workflow-manifest.json');
    await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2), 'utf-8');
    
    console.log(`Created workflow manifest: ${manifestPath}`);
  }

  /**
   * Generate workflow summary
   */
  generateWorkflowSummary(artifacts) {
    const typeGroups = artifacts.reduce((groups, artifact) => {
      const type = artifact.type;
      groups[type] = (groups[type] || 0) + 1;
      return groups;
    }, {});

    const agentContributions = artifacts.reduce((contributions, artifact) => {
      const agent = artifact.metadata?.agent || 'unknown';
      contributions[agent] = (contributions[agent] || 0) + 1;
      return contributions;
    }, {});

    return {
      artifactsByType: typeGroups,
      agentContributions,
      totalSize: artifacts.reduce((sum, artifact) => sum + (artifact.size || 0), 0)
    };
  }

  /**
   * Load workflow artifacts from filesystem
   */
  async loadWorkflowArtifacts(workflowId) {
    if (!isServer || !this.initialized) {
      return [];
    }

    try {
      const workflowDir = path.join(this.artifactsPath, 'workflows', workflowId);
      const manifestPath = path.join(workflowDir, 'workflow-manifest.json');
      
      // Check if workflow directory exists
      try {
        await fs.access(workflowDir);
      } catch (error) {
        console.log(`No artifacts found for workflow ${workflowId}`);
        return [];
      }

      // Load manifest
      const manifestContent = await fs.readFile(manifestPath, 'utf-8');
      const manifest = JSON.parse(manifestContent);

      // Load artifact contents
      const artifacts = [];
      for (const artifactInfo of manifest.artifacts) {
        const artifactPath = path.join(workflowDir, artifactInfo.filename);
        try {
          const content = await fs.readFile(artifactPath, 'utf-8');
          artifacts.push({
            ...artifactInfo,
            content,
            filepath: artifactPath
          });
        } catch (error) {
          console.warn(`Could not load artifact ${artifactInfo.filename}:`, error);
        }
      }

      return artifacts;

    } catch (error) {
      console.error(`Error loading artifacts for workflow ${workflowId}:`, error);
      return [];
    }
  }

  /**
   * Get workflow list with artifact summaries
   */
  async getWorkflowList() {
    if (!isServer || !this.initialized) {
      return [];
    }

    try {
      const workflowsDir = path.join(this.artifactsPath, 'workflows');
      const entries = await fs.readdir(workflowsDir, { withFileTypes: true });
      
      const workflows = [];
      for (const entry of entries) {
        if (entry.isDirectory()) {
          const workflowId = entry.name;
          const manifestPath = path.join(workflowsDir, workflowId, 'workflow-manifest.json');
          
          try {
            const manifestContent = await fs.readFile(manifestPath, 'utf-8');
            const manifest = JSON.parse(manifestContent);
            workflows.push({
              workflowId,
              createdAt: manifest.createdAt,
              totalArtifacts: manifest.totalArtifacts,
              summary: manifest.summary
            });
          } catch (error) {
            console.warn(`Could not load manifest for workflow ${workflowId}`);
          }
        }
      }

      return workflows.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    } catch (error) {
      console.error('Error getting workflow list:', error);
      return [];
    }
  }

  /**
   * Delete workflow artifacts
   */
  async deleteWorkflowArtifacts(workflowId) {
    if (!isServer || !this.initialized) {
      return false;
    }

    try {
      const workflowDir = path.join(this.artifactsPath, 'workflows', workflowId);
      await this.removeDirectory(workflowDir);
      console.log(`Deleted artifacts for workflow ${workflowId}`);
      return true;
    } catch (error) {
      console.error(`Error deleting artifacts for workflow ${workflowId}:`, error);
      return false;
    }
  }

  /**
   * Export workflow artifacts as archive
   */
  async exportWorkflowArtifacts(workflowId, format = 'json') {
    if (!isServer || !this.initialized) {
      return null;
    }

    try {
      const artifacts = await this.loadWorkflowArtifacts(workflowId);
      
      if (format === 'json') {
        return {
          workflowId,
          exportedAt: new Date().toISOString(),
          artifacts: artifacts.map(artifact => ({
            name: artifact.name,
            type: artifact.type,
            filename: artifact.filename,
            content: artifact.content,
            description: artifact.description,
            metadata: artifact.metadata
          }))
        };
      }

      // Other formats can be added here (zip, tar, etc.)
      throw new Error(`Export format ${format} not supported`);

    } catch (error) {
      console.error(`Error exporting artifacts for workflow ${workflowId}:`, error);
      return null;
    }
  }

  /**
   * Ensure directory exists
   */
  async ensureDirectory(dirPath) {
    try {
      await fs.access(dirPath);
    } catch (error) {
      await fs.mkdir(dirPath, { recursive: true });
    }
  }

  /**
   * Remove directory recursively
   */
  async removeDirectory(dirPath) {
    try {
      await fs.rm(dirPath, { recursive: true, force: true });
    } catch (error) {
      console.warn(`Could not remove directory ${dirPath}:`, error);
    }
  }

  /**
   * Get artifacts storage statistics
   */
  async getStorageStats() {
    if (!isServer || !this.initialized) {
      return null;
    }

    try {
      const workflows = await this.getWorkflowList();
      const totalWorkflows = workflows.length;
      const totalArtifacts = workflows.reduce((sum, wf) => sum + wf.totalArtifacts, 0);
      
      // Calculate total storage size
      const totalSize = workflows.reduce((sum, wf) => sum + (wf.summary?.totalSize || 0), 0);

      return {
        totalWorkflows,
        totalArtifacts,
        totalSize,
        averageArtifactsPerWorkflow: totalWorkflows > 0 ? Math.round(totalArtifacts / totalWorkflows) : 0,
        storageLocation: this.artifactsPath
      };

    } catch (error) {
      console.error('Error getting storage stats:', error);
      return null;
    }
  }

  /**
   * Cleanup old artifacts
   */
  async cleanup(olderThanDays = 30) {
    if (!isServer || !this.initialized) {
      return 0;
    }

    try {
      const workflows = await this.getWorkflowList();
      const cutoffDate = new Date(Date.now() - (olderThanDays * 24 * 60 * 60 * 1000));
      
      let cleanedCount = 0;
      for (const workflow of workflows) {
        const workflowDate = new Date(workflow.createdAt);
        if (workflowDate < cutoffDate) {
          const deleted = await this.deleteWorkflowArtifacts(workflow.workflowId);
          if (deleted) cleanedCount++;
        }
      }

      console.log(`Cleaned up ${cleanedCount} old workflow artifact directories`);
      return cleanedCount;

    } catch (error) {
      console.error('Error during artifact cleanup:', error);
      return 0;
    }
  }
}

module.exports = { ArtifactManager };